{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\workspace\\\\yoru-ui-web\\\\src\\\\effectPages\\\\TransitionGrid\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { useTransition, a } from \"react-spring\";\nimport shuffle from \"lodash/shuffle\";\nimport useMeasure from \"./useMeasure\";\nimport useMedia from \"./useMedia\";\nimport data from \"./data\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst List = styled.div`\n  & {\n    .list {\n      position: relative;\n      font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir,\n        helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial,\n        sans-serif;\n      width: 100%;\n      height: 100%;\n    }\n\n    .list > div {\n      position: absolute;\n      will-change: transform, width, height, opacity;\n      padding: 15px;\n    }\n\n    .list > div > div {\n      position: relative;\n      background-size: cover;\n      background-position: center center;\n      width: 100%;\n      height: 100%;\n      overflow: hidden;\n      text-transform: uppercase;\n      font-size: 10px;\n      line-height: 10px;\n      border-radius: 4px;\n      box-shadow: 0px 10px 50px -10px rgba(0, 0, 0, 0.2);\n    }\n  }\n`;\n_c = List;\nexport default function TransitionGrid() {\n  _s();\n\n  // Hook1: Tie media queries to the number of columns\n  const columns = useMedia([\"(min-width: 1500px)\", \"(min-width: 1000px)\", \"(min-width: 600px)\"], [5, 4, 3], 2); // Hook2: Measure the width of the container element\n\n  const [bind, {\n    width\n  }] = useMeasure(); // Hook3: Hold items\n\n  const [items, set] = useState(data); // Hook4: shuffle data every 2 seconds\n\n  useEffect(() => void setInterval(() => set(shuffle), 2000), []); // Hook5: Form a grid of stacked items using width & columns we got from hooks 1 & 2\n\n  const [heights, gridItems] = useMemo(() => {\n    let heights = new Array(columns).fill(0); // Each column gets a height starting with zero\n\n    let gridItems = items.map((child, i) => {\n      const column = heights.indexOf(Math.min(...heights)); // Basic masonry-grid placing, puts tile into the smallest column using Math.min\n\n      const xy = [width / columns * column, (heights[column] += child.height / 2) - child.height / 2]; // X = container width / number of columns * column index, Y = it's just the height of the current column\n\n      return { ...child,\n        xy,\n        width: width / columns,\n        height: child.height / 2\n      };\n    });\n    return [heights, gridItems];\n  }, [columns, items, width]); // Hook6: Turn the static grid values into animated transitions, any addition, removal or change will be animated\n\n  const transitions = useTransition(gridItems, item => item === null || item === void 0 ? void 0 : item.css, {\n    from: ({\n      xy,\n      width,\n      height\n    }) => ({\n      xy,\n      width,\n      height,\n      opacity: 0\n    }),\n    enter: ({\n      xy,\n      width,\n      height\n    }) => ({\n      xy,\n      width,\n      height,\n      opacity: 1\n    }),\n    update: ({\n      xy,\n      width,\n      height\n    }) => ({\n      xy,\n      width,\n      height\n    }),\n    leave: {\n      height: 0,\n      opacity: 0\n    },\n    config: {\n      mass: 5,\n      tension: 500,\n      friction: 100\n    },\n    trail: 25\n  });\n  return /*#__PURE__*/_jsxDEV(List, { ...bind,\n    style: {\n      height: Math.max(...heights)\n    },\n    children: transitions.map(({\n      item,\n      props: {\n        xy,\n        ...rest\n      },\n      key\n    }) => /*#__PURE__*/_jsxDEV(a.div, {\n      style: {\n        transform: xy.interpolate((x, y) => `translate3d(${x}px,${y}px,0)`),\n        ...rest\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundImage: item.css\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TransitionGrid, \"BEs7kbi2PYVvZ/I46Iapo9stDaM=\", false, function () {\n  return [useMedia, useMeasure, useTransition];\n});\n\n_c2 = TransitionGrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"List\");\n$RefreshReg$(_c2, \"TransitionGrid\");","map":{"version":3,"sources":["C:/Users/user/Desktop/workspace/yoru-ui-web/src/effectPages/TransitionGrid/index.js"],"names":["React","useState","useEffect","useMemo","useTransition","a","shuffle","useMeasure","useMedia","data","styled","List","div","TransitionGrid","columns","bind","width","items","set","setInterval","heights","gridItems","Array","fill","map","child","i","column","indexOf","Math","min","xy","height","transitions","item","css","from","opacity","enter","update","leave","config","mass","tension","friction","trail","max","props","rest","key","transform","interpolate","x","y","backgroundImage"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useTransition, a } from \"react-spring\";\r\nimport shuffle from \"lodash/shuffle\";\r\nimport useMeasure from \"./useMeasure\";\r\nimport useMedia from \"./useMedia\";\r\nimport data from \"./data\";\r\nimport styled from \"styled-components\";\r\n\r\nconst List = styled.div`\r\n  & {\r\n    .list {\r\n      position: relative;\r\n      font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir,\r\n        helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial,\r\n        sans-serif;\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n\r\n    .list > div {\r\n      position: absolute;\r\n      will-change: transform, width, height, opacity;\r\n      padding: 15px;\r\n    }\r\n\r\n    .list > div > div {\r\n      position: relative;\r\n      background-size: cover;\r\n      background-position: center center;\r\n      width: 100%;\r\n      height: 100%;\r\n      overflow: hidden;\r\n      text-transform: uppercase;\r\n      font-size: 10px;\r\n      line-height: 10px;\r\n      border-radius: 4px;\r\n      box-shadow: 0px 10px 50px -10px rgba(0, 0, 0, 0.2);\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function TransitionGrid() {\r\n  // Hook1: Tie media queries to the number of columns\r\n  const columns = useMedia(\r\n    [\"(min-width: 1500px)\", \"(min-width: 1000px)\", \"(min-width: 600px)\"],\r\n    [5, 4, 3],\r\n    2\r\n  );\r\n  // Hook2: Measure the width of the container element\r\n  const [bind, { width }] = useMeasure();\r\n  // Hook3: Hold items\r\n  const [items, set] = useState(data);\r\n  // Hook4: shuffle data every 2 seconds\r\n  useEffect(() => void setInterval(() => set(shuffle), 2000), []);\r\n  // Hook5: Form a grid of stacked items using width & columns we got from hooks 1 & 2\r\n  const [heights, gridItems] = useMemo(() => {\r\n    let heights = new Array(columns).fill(0); // Each column gets a height starting with zero\r\n    let gridItems = items.map((child, i) => {\r\n      const column = heights.indexOf(Math.min(...heights)); // Basic masonry-grid placing, puts tile into the smallest column using Math.min\r\n      const xy = [\r\n        (width / columns) * column,\r\n        (heights[column] += child.height / 2) - child.height / 2,\r\n      ]; // X = container width / number of columns * column index, Y = it's just the height of the current column\r\n      return { ...child, xy, width: width / columns, height: child.height / 2 };\r\n    });\r\n    return [heights, gridItems];\r\n  }, [columns, items, width]);\r\n  // Hook6: Turn the static grid values into animated transitions, any addition, removal or change will be animated\r\n  const transitions = useTransition(gridItems, (item) => item?.css, {\r\n    from: ({ xy, width, height }) => ({ xy, width, height, opacity: 0 }),\r\n    enter: ({ xy, width, height }) => ({ xy, width, height, opacity: 1 }),\r\n    update: ({ xy, width, height }) => ({ xy, width, height }),\r\n    leave: { height: 0, opacity: 0 },\r\n    config: { mass: 5, tension: 500, friction: 100 },\r\n    trail: 25,\r\n  });\r\n  return (\r\n    <List {...bind} style={{ height: Math.max(...heights) }}>\r\n      {transitions.map(({ item, props: { xy, ...rest }, key }) => (\r\n        <a.div\r\n          key={key}\r\n          style={{\r\n            transform: xy.interpolate((x, y) => `translate3d(${x}px,${y}px,0)`),\r\n            ...rest,\r\n          }}\r\n        >\r\n          <div style={{ backgroundImage: item.css }} />\r\n        </a.div>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}