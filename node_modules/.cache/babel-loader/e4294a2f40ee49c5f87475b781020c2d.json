{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\workspace\\\\yoru-ui-web\\\\src\\\\effectPages\\\\TransitionGrid\\\\useCannon.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as CANNON from 'cannon';\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport { useFrame } from 'react-three-fiber'; // Cannon-world context provider\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst context = /*#__PURE__*/React.createContext();\nexport function Provider({\n  children\n}) {\n  _s();\n\n  // Set up physics\n  const [world] = useState(() => new CANNON.World());\n  useEffect(() => {\n    world.broadphase = new CANNON.NaiveBroadphase();\n    world.solver.iterations = 10;\n    world.gravity.set(0, 0, -25);\n  }, [world]); // Run world stepper every frame\n\n  useFrame(() => world.step(1 / 60)); // Distribute world via context\n\n  return /*#__PURE__*/_jsxDEV(context.Provider, {\n    value: world,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n} // Custom hook to maintain a world physics body\n\n_s(Provider, \"qAQ95cvRkzgBQoY01PTBpNzW4tc=\", false, function () {\n  return [useFrame];\n});\n\n_c = Provider;\nexport function useCannon({ ...props\n}, fn, deps = []) {\n  _s2();\n\n  const ref = useRef(); // Get cannon world object\n\n  const world = useContext(context); // Instanciate a physics body\n\n  const [body] = useState(() => new CANNON.Body(props));\n  useEffect(() => {\n    // Call function so the user can add shapes\n    fn(body); // Add body to world on mount\n\n    world.addBody(body); // Remove body on unmount\n\n    return () => world.removeBody(body);\n  }, deps);\n  useFrame(() => {\n    if (ref.current) {\n      // Transport cannon physics into the referenced threejs object\n      ref.current.position.copy(body.position);\n      ref.current.quaternion.copy(body.quaternion);\n    }\n  });\n  return ref;\n}\n\n_s2(useCannon, \"zy8orWBdPwFfUV+I4qoLevKJjWU=\", false, function () {\n  return [useFrame];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["C:/Users/user/Desktop/workspace/yoru-ui-web/src/effectPages/TransitionGrid/useCannon.js"],"names":["CANNON","React","useState","useEffect","useContext","useRef","useFrame","context","createContext","Provider","children","world","World","broadphase","NaiveBroadphase","solver","iterations","gravity","set","step","useCannon","props","fn","deps","ref","body","Body","addBody","removeBody","current","position","copy","quaternion"],"mappings":";;;;AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,SAASC,QAAT,QAAyB,mBAAzB,C,CAEA;;;AACA,MAAMC,OAAO,gBAAGN,KAAK,CAACO,aAAN,EAAhB;AACA,OAAO,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAAA;;AACrC;AACA,QAAM,CAACC,KAAD,IAAUT,QAAQ,CAAC,MAAM,IAAIF,MAAM,CAACY,KAAX,EAAP,CAAxB;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,KAAK,CAACE,UAAN,GAAmB,IAAIb,MAAM,CAACc,eAAX,EAAnB;AACAH,IAAAA,KAAK,CAACI,MAAN,CAAaC,UAAb,GAA0B,EAA1B;AACAL,IAAAA,KAAK,CAACM,OAAN,CAAcC,GAAd,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAC,EAAzB;AACD,GAJQ,EAIN,CAACP,KAAD,CAJM,CAAT,CAHqC,CASrC;;AACAL,EAAAA,QAAQ,CAAC,MAAMK,KAAK,CAACQ,IAAN,CAAW,IAAI,EAAf,CAAP,CAAR,CAVqC,CAWrC;;AACA,sBAAO,QAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAER,KAAzB;AAAgC,IAAA,QAAQ,EAAED;AAA1C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;;GAfgBD,Q;UAUdH,Q;;;KAVcG,Q;AAgBhB,OAAO,SAASW,SAAT,CAAmB,EAAE,GAAGC;AAAL,CAAnB,EAAiCC,EAAjC,EAAqCC,IAAI,GAAG,EAA5C,EAAgD;AAAA;;AACrD,QAAMC,GAAG,GAAGnB,MAAM,EAAlB,CADqD,CAErD;;AACA,QAAMM,KAAK,GAAGP,UAAU,CAACG,OAAD,CAAxB,CAHqD,CAIrD;;AACA,QAAM,CAACkB,IAAD,IAASvB,QAAQ,CAAC,MAAM,IAAIF,MAAM,CAAC0B,IAAX,CAAgBL,KAAhB,CAAP,CAAvB;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACd;AACAmB,IAAAA,EAAE,CAACG,IAAD,CAAF,CAFc,CAGd;;AACAd,IAAAA,KAAK,CAACgB,OAAN,CAAcF,IAAd,EAJc,CAKd;;AACA,WAAO,MAAMd,KAAK,CAACiB,UAAN,CAAiBH,IAAjB,CAAb;AACD,GAPQ,EAONF,IAPM,CAAT;AASAjB,EAAAA,QAAQ,CAAC,MAAM;AACb,QAAIkB,GAAG,CAACK,OAAR,EAAiB;AACf;AACAL,MAAAA,GAAG,CAACK,OAAJ,CAAYC,QAAZ,CAAqBC,IAArB,CAA0BN,IAAI,CAACK,QAA/B;AACAN,MAAAA,GAAG,CAACK,OAAJ,CAAYG,UAAZ,CAAuBD,IAAvB,CAA4BN,IAAI,CAACO,UAAjC;AACD;AACF,GANO,CAAR;AAQA,SAAOR,GAAP;AACD;;IAxBeJ,S;UAedd,Q","sourcesContent":["import * as CANNON from 'cannon'\r\nimport React, { useState, useEffect, useContext, useRef } from 'react'\r\nimport { useFrame } from 'react-three-fiber'\r\n\r\n// Cannon-world context provider\r\nconst context = React.createContext()\r\nexport function Provider({ children }) {\r\n  // Set up physics\r\n  const [world] = useState(() => new CANNON.World())\r\n  useEffect(() => {\r\n    world.broadphase = new CANNON.NaiveBroadphase()\r\n    world.solver.iterations = 10\r\n    world.gravity.set(0, 0, -25)\r\n  }, [world])\r\n\r\n  // Run world stepper every frame\r\n  useFrame(() => world.step(1 / 60))\r\n  // Distribute world via context\r\n  return <context.Provider value={world} children={children} />\r\n}\r\n\r\n// Custom hook to maintain a world physics body\r\nexport function useCannon({ ...props }, fn, deps = []) {\r\n  const ref = useRef()\r\n  // Get cannon world object\r\n  const world = useContext(context)\r\n  // Instanciate a physics body\r\n  const [body] = useState(() => new CANNON.Body(props))\r\n  useEffect(() => {\r\n    // Call function so the user can add shapes\r\n    fn(body)\r\n    // Add body to world on mount\r\n    world.addBody(body)\r\n    // Remove body on unmount\r\n    return () => world.removeBody(body)\r\n  }, deps)\r\n\r\n  useFrame(() => {\r\n    if (ref.current) {\r\n      // Transport cannon physics into the referenced threejs object\r\n      ref.current.position.copy(body.position)\r\n      ref.current.quaternion.copy(body.quaternion)\r\n    }\r\n  })\r\n\r\n  return ref\r\n}\r\n"]},"metadata":{},"sourceType":"module"}