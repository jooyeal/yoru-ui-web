{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\workspace\\\\yoru-ui-web\\\\src\\\\effectPages\\\\TransitionGrid\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Spring, config } from \"react-spring\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet canvasWidth = 500;\nlet canvasHeight = 500;\nlet outerPadding = 20;\nlet arcThickness = 48;\nlet ringPadding = 8;\nlet moveColor = \"#EC204F\";\nlet exerciseColor = \"#A0F531\";\nlet standColor = \"#23C4DC\";\nlet darkGrayColor = \"#031C21\";\nlet movePercent = 0.7;\nlet exercisePercent = 0.6;\nlet standPercent = 0.4;\nlet animationDelay = 300;\nlet springConfig = {\n  tension: 280,\n  friction: 120\n};\n\nclass Arc extends React.Component {\n  componentDidMount() {\n    this.draw();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw(startAngle, endAngle) {\n    const {\n      props\n    } = this;\n\n    if (!props.canvas) {\n      return;\n    }\n\n    let ctx = props.canvas.getContext(\"2d\");\n    ctx.lineWidth = props.thickness;\n    ctx.lineCap = \"round\";\n    ctx.strokeStyle = darkGrayColor;\n    ctx.beginPath();\n    ctx.arc(props.offsetX, props.offsetY, props.diameter / 2, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.strokeStyle = props.color;\n    ctx.beginPath();\n    ctx.arc(props.offsetX, props.offsetY, props.diameter / 2, props.startAngle, props.endAngle);\n    ctx.stroke();\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      animationShouldStart: false,\n      canvas: null\n    };\n\n    this.setCanvasRef = ref => {\n      this.setState({\n        canvas: ref\n      });\n\n      if (ref) {\n        ref.style.width = `${canvasWidth}px`;\n        ref.style.height = `${canvasHeight}px`;\n        ref.getContext(\"2d\").scale(2, 2);\n        let ctx = ref.getContext(\"2d\");\n        ctx.fillStyle = \"#000000\";\n        ctx.rect(0, 0, canvasWidth, canvasHeight);\n        ctx.fill();\n      }\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        animationShouldStart: true\n      });\n    }, animationDelay);\n  }\n\n  getArcEnd(percent) {\n    const {\n      state\n    } = this;\n\n    if (state.animationShouldStart) {\n      return percent * Math.PI * 2 - Math.PI / 2;\n    }\n\n    return -Math.PI / 2;\n  }\n\n  render() {\n    const {\n      state\n    } = this;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.setCanvasRef,\n        width: canvasWidth * 2,\n        height: canvasHeight * 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Spring, {\n        from: {\n          x: -Math.PI / 2\n        },\n        to: {\n          x: this.getArcEnd(movePercent)\n        },\n        config: springConfig,\n        children: ({\n          x\n        }) => /*#__PURE__*/_jsxDEV(Arc, {\n          canvas: state.canvas,\n          startAngle: -Math.PI / 2,\n          endAngle: x,\n          offsetX: canvasWidth / 2,\n          offsetY: canvasHeight / 2,\n          diameter: canvasWidth - outerPadding - arcThickness,\n          thickness: arcThickness,\n          color: moveColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Spring, {\n        from: {\n          x: -Math.PI / 2\n        },\n        to: {\n          x: this.getArcEnd(exercisePercent)\n        },\n        config: springConfig,\n        children: ({\n          x\n        }) => /*#__PURE__*/_jsxDEV(Arc, {\n          canvas: state.canvas,\n          startAngle: -Math.PI / 2,\n          endAngle: x,\n          offsetX: canvasWidth / 2,\n          offsetY: canvasHeight / 2,\n          diameter: canvasWidth - outerPadding - arcThickness - arcThickness * 2 - ringPadding,\n          thickness: arcThickness,\n          color: exerciseColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Spring, {\n        from: {\n          x: -Math.PI / 2\n        },\n        to: {\n          x: this.getArcEnd(standPercent)\n        },\n        config: springConfig,\n        children: ({\n          x\n        }) => /*#__PURE__*/_jsxDEV(Arc, {\n          canvas: state.canvas,\n          startAngle: -Math.PI / 2,\n          endAngle: x,\n          offsetX: canvasWidth / 2,\n          offsetY: canvasHeight / 2,\n          diameter: canvasWidth - outerPadding - arcThickness - arcThickness * 4 - ringPadding * 2,\n          thickness: arcThickness,\n          color: standColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/workspace/yoru-ui-web/src/effectPages/TransitionGrid/index.js"],"names":["React","ReactDOM","Spring","config","canvasWidth","canvasHeight","outerPadding","arcThickness","ringPadding","moveColor","exerciseColor","standColor","darkGrayColor","movePercent","exercisePercent","standPercent","animationDelay","springConfig","tension","friction","Arc","Component","componentDidMount","draw","componentDidUpdate","startAngle","endAngle","props","canvas","ctx","getContext","lineWidth","thickness","lineCap","strokeStyle","beginPath","arc","offsetX","offsetY","diameter","Math","PI","stroke","color","render","App","state","animationShouldStart","setCanvasRef","ref","setState","style","width","height","scale","fillStyle","rect","fill","setTimeout","getArcEnd","percent","x"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Spring, config } from \"react-spring\";\r\n\r\nimport \"./styles.css\";\r\n\r\nlet canvasWidth = 500;\r\nlet canvasHeight = 500;\r\nlet outerPadding = 20;\r\nlet arcThickness = 48;\r\nlet ringPadding = 8;\r\n\r\nlet moveColor = \"#EC204F\";\r\nlet exerciseColor = \"#A0F531\";\r\nlet standColor = \"#23C4DC\";\r\nlet darkGrayColor = \"#031C21\";\r\n\r\nlet movePercent = 0.7;\r\nlet exercisePercent = 0.6;\r\nlet standPercent = 0.4;\r\n\r\nlet animationDelay = 300;\r\n\r\nlet springConfig = {\r\n  tension: 280,\r\n  friction: 120\r\n};\r\n\r\nclass Arc extends React.Component {\r\n  componentDidMount() {\r\n    this.draw();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.draw();\r\n  }\r\n\r\n  draw(startAngle, endAngle) {\r\n    const { props } = this;\r\n\r\n    if (!props.canvas) {\r\n      return;\r\n    }\r\n\r\n    let ctx = props.canvas.getContext(\"2d\");\r\n    ctx.lineWidth = props.thickness;\r\n    ctx.lineCap = \"round\";\r\n\r\n    ctx.strokeStyle = darkGrayColor;\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(props.offsetX, props.offsetY, props.diameter / 2, 0, Math.PI * 2);\r\n    ctx.stroke();\r\n\r\n    ctx.strokeStyle = props.color;\r\n    ctx.beginPath();\r\n    ctx.arc(\r\n      props.offsetX,\r\n      props.offsetY,\r\n      props.diameter / 2,\r\n      props.startAngle,\r\n      props.endAngle\r\n    );\r\n    ctx.stroke();\r\n  }\r\n\r\n  render() {\r\n    return null;\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    animationShouldStart: false,\r\n    canvas: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.setState({\r\n        animationShouldStart: true\r\n      });\r\n    }, animationDelay);\r\n  }\r\n\r\n  setCanvasRef = ref => {\r\n    this.setState({\r\n      canvas: ref\r\n    });\r\n\r\n    if (ref) {\r\n      ref.style.width = `${canvasWidth}px`;\r\n      ref.style.height = `${canvasHeight}px`;\r\n\r\n      ref.getContext(\"2d\").scale(2, 2);\r\n\r\n      let ctx = ref.getContext(\"2d\");\r\n      ctx.fillStyle = \"#000000\";\r\n      ctx.rect(0, 0, canvasWidth, canvasHeight);\r\n      ctx.fill();\r\n    }\r\n  };\r\n\r\n  getArcEnd(percent) {\r\n    const { state } = this;\r\n\r\n    if (state.animationShouldStart) {\r\n      return percent * Math.PI * 2 - Math.PI / 2;\r\n    }\r\n\r\n    return -Math.PI / 2;\r\n  }\r\n\r\n  render() {\r\n    const { state } = this;\r\n\r\n    return (\r\n      <>\r\n        <canvas\r\n          ref={this.setCanvasRef}\r\n          width={canvasWidth * 2}\r\n          height={canvasHeight * 2}\r\n        />\r\n        <Spring\r\n          from={{ x: -Math.PI / 2 }}\r\n          to={{ x: this.getArcEnd(movePercent) }}\r\n          config={springConfig}\r\n        >\r\n          {({ x }) => (\r\n            <Arc\r\n              canvas={state.canvas}\r\n              startAngle={-Math.PI / 2}\r\n              endAngle={x}\r\n              offsetX={canvasWidth / 2}\r\n              offsetY={canvasHeight / 2}\r\n              diameter={canvasWidth - outerPadding - arcThickness}\r\n              thickness={arcThickness}\r\n              color={moveColor}\r\n            />\r\n          )}\r\n        </Spring>\r\n        <Spring\r\n          from={{ x: -Math.PI / 2 }}\r\n          to={{ x: this.getArcEnd(exercisePercent) }}\r\n          config={springConfig}\r\n        >\r\n          {({ x }) => (\r\n            <Arc\r\n              canvas={state.canvas}\r\n              startAngle={-Math.PI / 2}\r\n              endAngle={x}\r\n              offsetX={canvasWidth / 2}\r\n              offsetY={canvasHeight / 2}\r\n              diameter={\r\n                canvasWidth -\r\n                outerPadding -\r\n                arcThickness -\r\n                arcThickness * 2 -\r\n                ringPadding\r\n              }\r\n              thickness={arcThickness}\r\n              color={exerciseColor}\r\n            />\r\n          )}\r\n        </Spring>\r\n        <Spring\r\n          from={{ x: -Math.PI / 2 }}\r\n          to={{ x: this.getArcEnd(standPercent) }}\r\n          config={springConfig}\r\n        >\r\n          {({ x }) => (\r\n            <Arc\r\n              canvas={state.canvas}\r\n              startAngle={-Math.PI / 2}\r\n              endAngle={x}\r\n              offsetX={canvasWidth / 2}\r\n              offsetY={canvasHeight / 2}\r\n              diameter={\r\n                canvasWidth -\r\n                outerPadding -\r\n                arcThickness -\r\n                arcThickness * 4 -\r\n                ringPadding * 2\r\n              }\r\n              thickness={arcThickness}\r\n              color={standColor}\r\n            />\r\n          )}\r\n        </Spring>\r\n      </>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}